{\rtf1\ansi\deff1\adeflang1025
{\fonttbl{\f0\froman\fprq2\fcharset238 Times New Roman{\*\falt Thorndale};}{\f1\fnil\fprq0\fcharset238 Arial;}{\f2\fnil\fprq0\fcharset238 Arial;}{\f3\froman\fprq2\fcharset238 Times New Roman;}{\f4\froman\fprq1\fcharset238 Courier;}{\f5\froman\fprq1\fcharset238 Courier;}{\f6\fswiss\fprq2\fcharset238 Courier;}{\f7\fnil\fprq2\fcharset238 HG Mincho Light J;}{\f8\fswiss\fprq0\fcharset238 Arial CE;}{\f9\fnil\fprq2\fcharset238 Arial Unicode MS;}}
{\colortbl;\red0\green0\blue0;\red0\green0\blue128;\red255\green255\blue255;\red128\green128\blue128;}
{\stylesheet{\s1\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs20\lang1045\snext1 Domy\u347 ?lnie;}
{\s2\sa119\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs20\lang1045\sbasedon1\snext2 Obszar tekstu;}
{\s3\sa119\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\fs20\lang1045\sbasedon2\snext3 Lista;}
{\s4\li567\ri0\fi-283\sa240\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\fs20\lang1045\sbasedon3\snext4 Koniec listy 2 ;}
{\s5\sb120\sa120\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs20\lang255\ai\ltrch\dbch\af7\afs20\langfe255\ai\loch\fs20\lang1045\i\sbasedon1\snext5 Etykieta;}
{\s6\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\fs20\lang1045\sbasedon1\snext6 Indeks;}
{\s7\chcbpat3{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af9\afs20\lang255\ltrch\dbch\af7\afs20\langfe255\loch\f1\fs20\lang1045\sbasedon1\snext7 Normal;}
{\s8\li567\ri0\fi-283\sa240\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\fs20\lang1045\sbasedon4\snext8 KOD;}
{\s9\box\brdrs\brdrw1\brdrcf1\brsp28{\*\brdrt\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrl\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrb\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrr\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f4\fs20\lang1045\sbasedon2\snext9 kod;}
{\*\cs11\cf2\ul\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs24\lang1045 \u321 ?\u261 ?cze internetowe;}
{\*\cs12\chcbpat3\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs24\lang1045\sbasedon13 Default Paragraph Font;}
{\*\cs13\chcbpat3\rtlch\af9\afs20\lang255\ltrch\dbch\af7\afs20\langfe255\loch\f1\fs20\lang1045 Normal;}
}
{\info{\creatim\yr2003\mo3\dy8\hr1\min4}{\operator Piotr Janczura}{\revtim\yr2003\mo6\dy17\hr17\min18}{\printim\yr2003\mo4\dy10\hr20\min39}{\comment StarWriter}{\vern6410}}\deftab1250
{\*\pgdsctbl
{\pgdsc0\pgdscuse195\pgwsxn11905\pghsxn16837\marglsxn1134\margrsxn1134\margtsxn1134\margbsxn1134\pgdscnxt0 Domy\u347 ?lnie;}
{\pgdsc1\pgdscuse195\pgwsxn11905\pghsxn16837\marglsxn1134\margrsxn567\margtsxn567\margbsxn567\pgdscnxt1 HTML;}}
{\*\pgdscno1}\paperh16837\paperw11905\margl1134\margr567\margt567\margb567\sectd\sbknone\pgwsxn11905\pghsxn16837\marglsxn1134\margrsxn567\margtsxn567\margbsxn567\ftnbj\ftnstart1\ftnrstcont\ftnnar\aenddoc\aftnrstcont\aftnstart1\aftnnrlc
\pard\plain \s2\sa119\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs20\lang1045 {\ltrch\loch\f1 }
\par \pard\plain \s2\sa119\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs20\lang1045\ltrch\loch\f3\fs40\i\b {\ltrch\loch\f3 Wykorzystanie linii steruj\u261 ?cych portu RS232}
\par \pard\plain \s2\sa119\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs20\lang1045\ul\ltrch\loch\f3\fs30\i\b 
\par \pard\plain \s2\sa119\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs20\lang1045 {\ltrch\loch\f1 \tab Opis i wykorzystanie RS232 zosta\u322 ? opisany w zakresie w jakim przewidziane jest jego stosowanie w podstawowych konfiguracjach wykorzystuj\u261 ?cych wyprowadze\u324 ? TxD i RxD. Chyba \u380 ?aden z projekt\'f3w z tego co sobie teraz przypominam nie korzysta\u322 ? z innych wyprowadz
e\u324 ?. Pewnie nie nale\u380 ?y si\u281 ? temu dziwi\u263 ? poniewa\u380 ? ograniczanie ilo\u347 ?ci przewod\'f3w do komunikacji mi\u281 ?dzy urz\u261 ?dzeniami to obowi\u261 ?zuj\u261 ?cy trend. I2C czy 1-wire oraz mikroprocesor po obu stronach z odpowiednim oprogramowaniem pozwala na przes\u322 ?anie dowolnie sformatowa
nych danych co dowodzi raczej braku konieczno\u347 ?ci powi\u281 ?kszania ilo\u347 ?ci linii wykorzystywanych do transmisji.  Zainteresowanie liniami steruj\u261 ?cymi w jakie wyposa\u380 ?ony jest RS232 jednak nie maleje wi\u281 ?c zajmiemy si\u281 ? ich u\u380 ?yciem. }
\par {\ltrch\loch\f1 \tab Do czego to mo\u380 ?e s\u322 ?u\u380 ?y\u263 ?? Najprostszym zastosowaniem b\u281 ?dzie mrugaj\u261 ?ca dioda, do\u322 ?\u261 ?czona do jednego z wyprowadze\u324 ?, sygnalizuj\u261 ?ca co\u347 ? przewidzianego przez projektanta. Czy przy monitorach 17 czy 19 calowych kt\'f3rych dodatkowo mo\u380 ?e by\u263 ? kilka w systemie, ma\u322 ?a cz
erwona lampka mo\u380 ?e mie\u263 ? jakie\u347 ? zastosowanie? Gdy np. wy\u322 ?\u261 ?czone s\u261 ? monitory, taki energooszcz\u281 ?dny sygnalizator mo\u380 ?e si\u281 ? sprawdzi\u263 ?. Mo\u380 ?e jakie\u347 ?  zdarzenie b\u281 ?dzie wymaga\u322 ?o poinformowania (przywo\u322 ?ania) operatora nie przebywaj\u261 ?cego ci\u261 ?gle przy danym stanowisku?
 }
\par {\ltrch\loch\f1 \tab Mo\u380 ?na liniami RTS i DTR za\u322 ?\u261 ?cza\u263 ? (przeka\u378 ?nikiem) urz\u261 ?dzenie na czas wykonania czynno\u347 ?ci co w oparciu o transmisje bez linii steruj\u261 ?cych wymaga aby urz\u261 ?dzenie a przynajmniej procesor by\u322 ? zawsze zasilany. To co wydaje si\u281 ? najprostszym i oczywistym zastosowa
niem : te linie mo\u380 ?na wykorzysta\u263 ? do sterowania urz\u261 ?dzeniem upraszczaj\u261 ?c jego elektronik\u281 ? lub/i oprogramowanie. Na liniach RTS, DTR (i pozosta\u322 ?ych) da si\u281 ? zrobi\u263 ? prosty kana\u322 ? komunikacyjny.}
\par \pard\plain \s2\sa119\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs20\lang1045\ltrch\loch\fs20 {\ltrch\loch\f1 \tab Wszystkie linie pr\'f3cz oczywi\u347 ?cie RxD i TxD reprezentowane s\u261 ? jako bity w rejestrach MCR i MSR (tabelka we wcze\u347 ?niejszym artykule). Wp\u322 ?yw na odpowiedni\u261 ? linie mamy dzi\u281 ?ki operacj\u261 ? logicznym na bitach tych rejestr\'f3w. Dokumentacja nie pozwala za\u322 ?o\u380 ?y\u263 ? \u380 ?e reje
stry steruj\u261 ?ce wyj\u347 ?ciowe pozwalaj\u261 ? odczyta\u263 ? sw\'f3j stan wi\u281 ?c nie mo\u380 ?emy liczy\u263 ? na operacje wykonywane bezpo\u347 ?rednio na warto\u347 ?ciach port\'f3w. Musimy przechowywa\u263 ? stan portu  w  zmiennej, na niej wykonywa\u263 ? operacje i jej warto\u347 ?\u263 ? wpisywa\u263 ? do rejestru steruj\u261 ?cego.}
\par 
\par \pard\plain \s2\sa119\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs20\lang1045\ltrch\loch\f3\fs28\i\b {\ltrch\loch\f3 Ustawianie linii wyj\u347 ?ciowych}
\par \pard\plain \s2\sa119\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs20\lang1045\ltrch\loch\fs24\b 
\par \pard\plain \s2\sa119\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs20\lang1045 {\ltrch\loch\f1 Zak\u322 ?adam \u380 ?e port zosta\u322 ? prawid\u322 ?owo otwarty a jego adres bazowy zapisano w zmiennej port. }
\par {\ltrch\loch\f1 Tworzymy zmienn\u261 ? przechowuj\u261 ?c\u261 ? stan rejestru MCR:}
\par 
\par \pard\plain \s9\box\brdrs\brdrw1\brdrcf1\brsp28{\*\brdrt\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrl\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrb\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrr\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f4\fs20\lang1045 {\ltrch\loch\f4 ubyte_t  mcr=0x08;}
\par \pard\plain \s2\sa119\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs20\lang1045 
\par {\ltrch\loch\f1 Rejestr MCR zawiera bity steruj\u261 ?ce prac\u261 ? ca\u322 ?ego urz\u261 ?dzenia RS232. Je\u380 ?eli nie przewidujemy pracy portu z obs\u322 ?ug\u261 ? przerwa\u324 ? do zmiennej mcr wpisujemy 0x00. Teraz ka\u380 ?da zmiana stanu portu sk\u322 ?ada si\u281 ? z operacji bitowej na zmiennej mcr i zapisaniu jej do rejestr
u MCR.}
\par \pard\plain \s2\sa119\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs20\lang1045\ltrch\loch\f5 
\par \pard\plain \s9\box\brdrs\brdrw1\brdrcf1\brsp28{\*\brdrt\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrl\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrb\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrr\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f4\fs20\lang1045 {\ltrch\loch\f4 mcr = mcr | 0x01; // Wstaw \ldblquote 1\rdblquote  na lini\u281 ? DTR, nie zmieniaj stanu pozosta\u322 ?ych}
\par {\ltrch\loch\f4 outportb(port+MCR,mcr);}
\par \pard\plain \s2\sa119\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs20\lang1045 
\par {\ltrch\loch\f1 Lub:}
\par 
\par \pard\plain \s9\box\brdrs\brdrw1\brdrcf1\brsp28{\*\brdrt\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrl\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrb\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrr\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f4\fs20\lang1045 {\ltrch\loch\f4 mcr = mcr | 0x02; // Wstaw \ldblquote 1\rdblquote  na lini\u281 ? RTS.}
\par {\ltrch\loch\f4 outportb(port+MCR,mcr);}
\par \pard\plain \s2\sa119\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs20\lang1045 
\par {\ltrch\loch\f1 Operacje ustawienia linii wyj\u347 ?ciowych w stan wysoki:}
\par 
\par \pard\plain \s9\box\brdrs\brdrw1\brdrcf1\brsp28{\*\brdrt\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrl\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrb\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrr\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f4\fs20\lang1045 {\ltrch\loch\f4 mcr = mcr & 0xFE; // dla DTR}
\par {\ltrch\loch\f4 mcr = mcr & 0xFD; // dla RTS}
\par \pard\plain \s2\sa119\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs20\lang1045 
\par {\ltrch\loch\f1 i oczywi\u347 ?cie ka\u380 ?dorazowo zapis do portu:}
\par 
\par \pard\plain \s9\box\brdrs\brdrw1\brdrcf1\brsp28{\*\brdrt\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrl\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrb\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrr\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f4\fs20\lang1045 {\ltrch\loch\f4 outportb(port+MCR,mcr);}
\par \pard\plain \s2\sa119\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs20\lang1045\ltrch\loch\f5 
\par \pard\plain \s2\sa119\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs20\lang1045 {\ltrch\loch\f1 Przydatna te\u380 ? b\u281 ?dzie mo\u380 ?liwo\u347 ?\u263 ? prze\u322 ?\u261 ?czania stanu tych linii na odwrotny do np. sterowania mrugaj\u261 ?c\u261 ? diod\u261 ?. Nie znajdziemy niestety operacji logicznej odwracaj\u261 ?cej stan tylko jednego bitu przez co operacje b\u281 ?d\u261 ? troch\u281 ? bardzie skomplikowane. Musimy \ldblquote r\u281 ?cznie
\rdblquote  sprawdzi\u263 ? warto\u347 ?\u263 ? interesuj\u261 ?cego nas bitu i ustawi\u263 ? go w stan przeciwny. }
\par 
\par {\ltrch\loch\f1 Przyk\u322 ?ad prze\u322 ?\u261 ?czaj\u261 ?cy lini\u281 ? DTR:}
\par \pard\plain \s9\box\brdrs\brdrw1\brdrcf1\brsp28{\*\brdrt\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrl\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrb\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrr\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f4\fs20\lang1045 {\ltrch\loch\f4 if(mcr & 0x01)}
\par {\ltrch\loch\f4   mcr = mcr & 0xFE;}
\par {\ltrch\loch\f4 else}
\par {\ltrch\loch\f4   mcr = mcr | 0x01;}
\par {\ltrch\loch\f4 outportb(port + MCR, mcr);}
\par \pard\plain \s2\sa119\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs20\lang1045 
\par {\ltrch\loch\f1 Przyk\u322 ?ad prze\u322 ?\u261 ?czaj\u261 ?cy lini\u281 ? RTS:}
\par \pard\plain \s9\box\brdrs\brdrw1\brdrcf1\brsp28{\*\brdrt\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrl\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrb\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrr\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f4\fs20\lang1045 {\ltrch\loch\f4 if(mcr & 0x02)}
\par {\ltrch\loch\f4   mcr = mcr & 0xFD;}
\par {\ltrch\loch\f4 else}
\par {\ltrch\loch\f4   mcr = mcr | 0x02;}
\par {\ltrch\loch\f4 outportb(port + MCR, mcr);}
\par \pard\plain \s2\sa119\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs20\lang1045 
\par {\ltrch\loch\f1  Sterowanie liniami DTR i RTS z programu pisanego pod system windows odbywa si\u281 ? przy pomocy specjalnej funkcji:}
\par \pard\plain \s2\sa119\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs20\lang1045\ltrch\loch\f6 
\par {\ltrch\loch\f6 BOOL EscapeCommFunction(}
\par \pard\plain \s2\sa119\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs20\lang1045\ltrch\loch\f6 {\ltrch\loch\f6     HANDLE hPort,\tab // uchwyt urz\u261 ?dzenia komunikacyjnego }
\par {\ltrch\loch\f6     DWORD dwFunc \tab // polecenie dla funkcji}
\par {\ltrch\loch\f6    );\tab }
\par {\ltrch\loch\f6  Polecenia dla funkcji:}
\par {\ltrch\loch\f6 CLRDTR\tab ustawia DTR w stan niski}
\par {\ltrch\loch\f6 CLRRTS\tab ustawia RTS w stan niski}
\par {\ltrch\loch\f6 SETDTR\tab ustawia DTR w stan wysoki}
\par {\ltrch\loch\f6 SETRTS\tab ustawia RTS w stan wysoki}
\par 
\par \pard\plain \s2\sa119\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs20\lang1045 {\ltrch\loch\f1 Funkcja zwraca FALSE gdy nie mog\u322 ?a wykona\u263 ? polecenia..   }
\par {\ltrch\loch\f1 Przyk\u322 ?adowe wywo\u322 ?anie :}
\par \pard\plain \s2\sa119\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs20\lang1045\ltrch\loch\f6 
\par {\ltrch\loch\f6 EscapeCommFunction(hPort,SETDTR);}
\par 
\par \pard\plain \s2\sa119\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs20\lang1045 {\ltrch\loch\f1 Niestety system nie udost\u281 ?pnia informacji o stanie na jaki ustawiono linie i je\u380 ?eli b\u281 ?dziemy chcieli wykonywa\u263 ? prze\u322 ?\u261 ?czanie linii DTR i RTS nale\u380 ?y ich stan zapami\u281 ?tywa\u263 ?. Wprawdzie w strukturach konfiguracyjnych znajduj\u261 ? si\u281 ? pola zwi\u261 ?zane z DTR i RTS ale do
tycz\u261 ? zachowania si\u281 ? oprogramowania systemowego nadzoruj\u261 ?cego prac\u281 ? portu a nie stanu danej linii. Przynajmniej na wysnucie takich wniosk\'f3w pozwala dost\u281 ?pna mi dokumentacja.}
\par 
\par \pard\plain \s2\sa119\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs20\lang1045\ltrch\loch\f3\fs28\i\b {\ltrch\loch\f3 Odczytywanie stanu linii wej\u347 ?ciowych.}
\par \pard\plain \s2\sa119\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs20\lang1045\ltrch\loch\fs24 
\par \pard\plain \s2\sa119\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs20\lang1045 {\ltrch\loch\f1 Bity odwzorowuj\u261 ?ce stan tych linii znajduj\u261 ? si\u281 ? w rejestrze MSR w kt\'f3rym opr\'f3cz informacji o aktualnym stanie dowolnej linii zapisane jest czy od ostatniego odczytu wyst\u261 ?pi\u322 ?a zmiana na danej linii. Przyda si\u281 ? taka informacja komu\u347 ? kto kogo pr\'f3cz aktualnego
 stanu interesuje czy pomi\u281 ?dzy sprawdzaniem zmieni\u322 ? si\u281 ? stan testowanej linii (oraz do obs\u322 ?ugi przerwa\u324 ?).}
\par 
\par {\ltrch\loch\f1 Odczytywanie portu i kontrola jednego z bit\'f3w mo\u380 ?e odbywa\u263 ? si\u281 ? \ldblquote bezpo\u347 ?rednio\rdblquote  na porcie:}
\par \pard\plain \s9\box\brdrs\brdrw1\brdrcf1\brsp28{\*\brdrt\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrl\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrb\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrr\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f4\fs20\lang1045 {\ltrch\loch\f4 #define LINIE_WE\tab MSR}
\par {\ltrch\loch\f4 #define LINIA_DCD\tab 0x80}
\par {\ltrch\loch\f4 #define LINIA_RI\tab 0x40}
\par {\ltrch\loch\f4 #define LINIA_DSR\tab 0x20}
\par {\ltrch\loch\f4 #define LINIA_CTS\tab 0x10}
\par {\ltrch\loch\f4 #define ZMIANA_DCD\tab 0x08}
\par {\ltrch\loch\f4 #define ZMIANA_RI\tab 0x04}
\par {\ltrch\loch\f4 #define ZMIANA_DSR\tab 0x02}
\par {\ltrch\loch\f4 #define ZMIANA_CTS\tab 0x01}
\par 
\par {\ltrch\loch\f4 bool stan_DCD;}
\par {\ltrch\loch\f4 stan_DCD = inportb(port+LINIE_WE) & LINIA_DCD; }
\par \pard\plain \s2\sa119\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs20\lang1045 
\par {\ltrch\loch\f1 Je\u380 ?eli kontroli podlega wi\u281 ?cej linii odwo\u322 ?anie si\u281 ? do rejestru portu spowolni prac\u281 ? programu. Lepiej b\u281 ?dzie pobra\u263 ? zawarto\u347 ?\u263 ? rejestru MSR do zmiennej i na niej przeprowadzi\u263 ? testu poszczeg\'f3lnych bit\'f3w.}
\par \pard\plain \s2\sa119\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs20\lang1045 {\ltrch\loch\f1 Kto uwa\u380 ?nie przeczyta\u322 ? tabel\u281 ? opisuj\u261 ?c\u261 ? rejestry portu RS232 zauwa\u380 ?y\u322 ? \u380 ?e zmiana na liniach wej\u347 ?ciowych mo\u380 ?e generowa\u263 ? przerwanie. Do aktywowania tej us\u322 ?ugi wewn\u261 ?trz danego portu s\u322 ?u\u380 ?y bit IER.3.  Wszystkie czynno\u347 ?ci konieczne do uruchomienia obs\u322 ?ugi przerw
a\u324 ? dla danego portu oczywi\u347 ?cie r\'f3wnie\u380 ? musz\u261 ? by\u263 ? wykonane. Procedura obs\u322 ?ugi przerwania mo\u380 ?e wykona\u263 ? czynno\u347 ?ci zwi\u261 ?zane z transmisj\u261 ? danych niezale\u380 ?nie od zmiany stanu linii steruj\u261 ?cych traktuj\u261 ?c je jako niczym nie zwi\u261 ?zane ze sob\u261 ? zadania. Mo\u380 ?na te\u380 ? przy 
pomocy linii sterowa\u263 ? komunikacj\u261 ? pomi\u281 ?dzy urz\u261 ?dzeniami. Niezale\u380 ?nie od przeznacze\u324 ? procedura obs\u322 ?ugi przerwania powinna by\u263 ? zbudowana zgodnie z poni\u380 ?szym szablonem:    }
\par \pard\plain \s9\box\brdrs\brdrw1\brdrcf1\brsp28{\*\brdrt\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrl\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrb\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrr\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f4\fs20\lang1045 {\ltrch\loch\f4 void interrupt far irq(...)}
\par {\ltrch\loch\f4 \{}
\par {\ltrch\loch\f4   ubyte_t iir = inportb(port + IIR) & IIR_TYP;}
\par {\ltrch\loch\f4   if(iir == IIR_WYSLANO)\{}
\par {\ltrch\loch\f4     // ...}
\par {\ltrch\loch\f4   \}}
\par {\ltrch\loch\f4   if(iir == IIR_ODEBRANO)\{}
\par {\ltrch\loch\f4     // ...}
\par {\ltrch\loch\f4   \}}
\par {\ltrch\loch\f4   if(iir == IIR_LINIE)\{}
\par {\ltrch\loch\f4     ubyte_t msr = inportb(port + MSR);}
\par {\ltrch\loch\f4     if(msr & ZMIANA_DCD)\{}
\par {\ltrch\loch\f4       // ... }
\par {\ltrch\loch\f4     \}}
\par {\ltrch\loch\f4     if(msr & ZMIANA_RI)\{}
\par {\ltrch\loch\f4       // ...}
\par {\ltrch\loch\f4     \}}
\par {\ltrch\loch\f4     if(msr & ZMIANA_DSR)\{}
\par {\ltrch\loch\f4       // ...}
\par {\ltrch\loch\f4     \}}
\par {\ltrch\loch\f4     if(msr & ZMIANA_CTS)\{}
\par {\ltrch\loch\f4       // ...}
\par {\ltrch\loch\f4     \}}
\par {\ltrch\loch\f4   \}}
\par {\ltrch\loch\f4   if(iir == IIR_ERROR)\{}
\par {\ltrch\loch\f4     // ..}
\par {\ltrch\loch\f4   \}}
\par {\ltrch\loch\f4   outportb(CTRL8259_ICR,EOI);}
\par \pard\plain \s9\box\brdrs\brdrw1\brdrcf1\brsp28{\*\brdrt\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrl\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrb\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrr\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f4\fs20\lang1045\ltrch\loch\f5\fs20 {\ltrch\loch\f5 \}}
\par \pard\plain \s1\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs20\lang1045\rtlch\af8\afs20\ltrch\dbch\af8\afs20\loch\fs20 
\par \pard\plain \s1\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs20\lang1045\ltrch\loch\fs20 {\ltrch\loch\f1 Wype\u322 ?nienie wszystkich blok\'f3w tej funkcji  (czyli zast\u261 ?pienie tego : // ... kodem) uczyni z niej wystarczaj\u261 ?ce narz\u281 ?dzie na wi\u281 ?kszo\u347 ?\u263 ? okazji. Nie potrzebne bloki mo\u380 ?na oczywi\u347 ?cie usun\u261 ?\u263 ? pozostawiaj\u261 ?c tylko wymagane minimum:}
\par 
\par \pard\plain \s9\box\brdrs\brdrw1\brdrcf1\brsp28{\*\brdrt\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrl\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrb\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrr\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f4\fs20\lang1045 {\ltrch\loch\f4 void interrupt far irq(...)}
\par {\ltrch\loch\f4 \{}
\par {\ltrch\loch\f4   if(inportb(port + MSR) & ZMIANA_RI)\{}
\par {\ltrch\loch\f4     // ...}
\par {\ltrch\loch\f4   \}}
\par {\ltrch\loch\f4  outportb(CTRL8259_ICR,EOI);}
\par \pard\plain \s9\box\brdrs\brdrw1\brdrcf1\brsp28{\*\brdrt\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrl\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrb\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrr\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f4\fs20\lang1045\ltrch\loch\f5\fs20 {\ltrch\loch\f5 \}}
\par \pard\plain \s1\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs20\lang1045\ltrch\loch\fs20 
\par {\ltrch\loch\f1 Funkcja nie identyfikuje \u378 ?r\'f3d\u322 ?a przerwania poniewa\u380 ? ma zadzia\u322 ?a\u263 ? gdy uleg\u322 ?a zmianie linia dzwonka a po identyfikacji w IIR w dalszym ci\u261 ?gu nale\u380 ?y wykona\u263 ? test na bicie ZMIANA_RI.}
\par 
\par \pard\plain \s1\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs20\lang1045 {\ltrch\loch\f1 Program w dla DOS obs\u322 ?uguj\u261 ?cy przerwania po zmianie na jednej z linii wej\u347 ?ciowych:}
\par {\ltrch\loch\f1 Program wykonuje podstawowe operacje w\u322 ?\u261 ?czaj\u261 ?ce i wy\u322 ?\u261 ?czaj\u261 ?ce prac\u281 ? przerwania. W p\u281 ?tli g\u322 ?\'f3wnej programu nie dzieje si\u281 ? nic imponuj\u261 ?cego \endash  po prostu sprawdzane s\u261 ? zmienne ustawiane przez procedur\u281 ? obs\u322 ?ugi przerwania i wy\u347 ?wietlana jest informacja gdy przerw
anie ustawi zmienn\u261 ? : zmieniono_Linie=true. Blok if(zmieniono_Linie)\{\} zawiera wy\u322 ?\u261 ?czone funkcje disable() i enable(). W\u322 ?\u261 ?czenie ich spowoduje \u380 ?e podczas wypisywania komunikat\'f3w o wynikach pracy przerwania to nie dokona zmian. W normalnych warunkach pracy 
przerwanie mo\u380 ?e odebra\u263 ? informacje o zmianie na linii np. DCD po wy\u347 ?wietleniu komunikatu o jej stanie a przed wy\u347 ?wietleniem komunikatu i ilo\u347 ?ci zmian linii DCD. Da si\u281 ? wtedy odczyta\u263 ? informacje, \u380 ?e od ostatniego odczytu stan linii zmieniono parzyst\u261 ? ilo\u347 ?\u263 ? 
razy a mimo tego stan linii zmieni\u322 ? si\u281 ? na przeciwny.  Wy\u322 ?\u261 ?czenie zg\u322 ?aszania przerwa\u324 ? na pocz\u261 ?tku bloku wy\u347 ?wietlaj\u261 ?cego rezultat jego pracy ma zapobiec takim nie\u347 ?cis\u322 ?o\u347 ?ciom.  Jednak teraz przerwanie b\u281 ?dzie \ldblquote przegapia\u263 ?\rdblquote  zmiany na liniach wej\u347 ?ciowych. Wspoma
ganie si\u281 ? funkcjami disable() i enable() nigdy nie nale\u380 ?a\u322 ?o do dobrych rozwi\u261 ?za\u324 ? i wypada\u322 ?o by popracowa\u263 ? nad lepsz\u261 ? budow\u261 ? programu na styku przerwa\u324 ? i p\u281 ?tli g\u322 ?\'f3wnej programu. Proponuj\u281 ? odkomentowa\u263 ? te funkcje i sprawdzi\u263 ? jako\u347 ?\u263 ? informacji generowanych w 
p\u281 ?tli g\u322 ?\'f3wnej (a mo\u380 ?e dla eksperymentu zamieni\u263 ? kolejno\u347 ?\u263 ? wierszy wypisuj\u261 ?cych stan linii i ilo\u347 ?\u263 ? zmian ?). Sama funkcja obs\u322 ?ugi przerwania nie robi nic po\u380 ?ytecznego \endash  zlicza jedynie zmiany na ka\u380 ?dej z linii, do zademonstrowania zagadnienia jest wystarczaj
\u261 ?ca. Program ustawia w stan wysoki wyj\u347 ?cia RTS i DTR, mo\u380 ?na je wykorzysta\u263 ? do podania stanu wysokiego na linie wej\u347 ?ciowe.}
\par \pard\plain \s9\box\brdrs\brdrw1\brdrcf1\brsp28{\*\brdrt\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrl\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrb\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrr\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f4\fs20\lang1045 {\ltrch\loch\f4 #include <conio.h>}
\par {\ltrch\loch\f4 #include <dos.h>}
\par {\ltrch\loch\f4 #include <iostream.h>}
\par {\ltrch\loch\f4 #include "..\\include\\typy.h"}
\par 
\par {\ltrch\loch\f4 #define RBR         0}
\par {\ltrch\loch\f4 #define IER         1}
\par {\ltrch\loch\f4 #define IIR         2}
\par {\ltrch\loch\f4 #define MCR         4}
\par {\ltrch\loch\f4 #define LSR         5}
\par {\ltrch\loch\f4 #define MSR         6}
\par {\ltrch\loch\f4 #define MCR_PRZERWANIE          0x08}
\par {\ltrch\loch\f4 #define IER_ZMIANA_NA_LINIACH   0x08}
\par {\ltrch\loch\f4 #define IIR_TYP                 0x06}
\par {\ltrch\loch\f4 #define IIR_LINIE               0x00}
\par {\ltrch\loch\f4 #define IIR_WYSLANO             0x02}
\par {\ltrch\loch\f4 #define IIR_ODEBRANO            0x04}
\par {\ltrch\loch\f4 #define IIR_ERROR               0x06}
\par {\ltrch\loch\f4 #define CTRL8259_ICR            0x20}
\par {\ltrch\loch\f4 #define CTRL8259_IMR            0x21}
\par {\ltrch\loch\f4 #define PRZERWANIA_COM13        0xef}
\par {\ltrch\loch\f4 #define PRZERWANIA_COM24        0xf7}
\par {\ltrch\loch\f4 #define EOI                     0x20}
\par {\ltrch\loch\f4 #define LINIE_WE                MSR}
\par {\ltrch\loch\f4 #define LINIA_DCD               0x80}
\par {\ltrch\loch\f4 #define LINIA_RI                0x40}
\par {\ltrch\loch\f4 #define LINIA_DSR               0x20}
\par {\ltrch\loch\f4 #define LINIA_CTS               0x10}
\par {\ltrch\loch\f4 #define ZMIANA_DCD              0x08}
\par {\ltrch\loch\f4 #define ZMIANA_RI               0x04}
\par {\ltrch\loch\f4 #define ZMIANA_DSR              0x02}
\par {\ltrch\loch\f4 #define ZMIANA_CTS              0x01}
\par 
\par {\ltrch\loch\f4 #define PORT                    0x2F8}
\par {\ltrch\loch\f4 #define VECT                    0x0b}
\par {\ltrch\loch\f4 #define PRZERWANIE_COM          PRZERWANIE_COM24}
\par 
\par {\ltrch\loch\f4 int zmieniono_DCD=0;}
\par {\ltrch\loch\f4 int zmieniono_RI=0;}
\par {\ltrch\loch\f4 int zmieniono_DSR=0;}
\par {\ltrch\loch\f4 int zmieniono_CTS=0;}
\par {\ltrch\loch\f4 bool zmieniono_Linie=false;}
\par 
\par {\ltrch\loch\f4 ubyte_t iir;}
\par {\ltrch\loch\f4 ubyte_t msr;}
\par {\ltrch\loch\f4 ubyte_t mcr=MCR_PRZERWANIE;}
\par 
\par {\ltrch\loch\f4 void interrupt far (*OldIrq)(...);}
\par 
\par {\ltrch\loch\f4 void interrupt far irq(...)}
\par {\ltrch\loch\f4 \{}
\par {\ltrch\loch\f4   iir=inportb(PORT+IIR);}
\par {\ltrch\loch\f4   if((iir&IIR_TYP)==IIR_LINIE)\{}
\par {\ltrch\loch\f4     zmieniono_Linie=true;}
\par {\ltrch\loch\f4     msr=inportb(PORT+MSR);}
\par {\ltrch\loch\f4     if(msr&ZMIANA_DCD)\{}
\par {\ltrch\loch\f4       zmieniono_DCD++;}
\par {\ltrch\loch\f4     \}}
\par {\ltrch\loch\f4     if(msr&ZMIANA_RI)\{}
\par {\ltrch\loch\f4       zmieniono_RI++;}
\par {\ltrch\loch\f4     \}}
\par {\ltrch\loch\f4     if(msr&ZMIANA_DSR)\{}
\par {\ltrch\loch\f4       zmieniono_DSR++;}
\par {\ltrch\loch\f4     \}}
\par {\ltrch\loch\f4     if(msr&ZMIANA_CTS)\{}
\par {\ltrch\loch\f4       zmieniono_CTS++;}
\par {\ltrch\loch\f4     \}}
\par {\ltrch\loch\f4   \}}
\par {\ltrch\loch\f4   outportb(CTRL8259_ICR,EOI);}
\par {\ltrch\loch\f4 \}}
\par 
\par {\ltrch\loch\f4 main()}
\par {\ltrch\loch\f4 \{}
\par {\ltrch\loch\f4   OldIrq=getvect(VECT);}
\par {\ltrch\loch\f4   setvect(VECT,irq);}
\par {\ltrch\loch\f4   outportb(CTRL8259_IMR,inportb(CTRL8259_IMR)&PRZERWANIA_COM);}
\par {\ltrch\loch\f4   outportb(PORT+MCR,mcr);}
\par {\ltrch\loch\f4   outportb(PORT+IER,IER_ZMIANA_NA_LINIACH);}
\par {\ltrch\loch\f4   inportb(PORT+LSR);}
\par {\ltrch\loch\f4   inportb(PORT+RBR);}
\par {\ltrch\loch\f4   outportb(CTRL8259_ICR,EOI);}
\par 
\par {\ltrch\loch\f4   mcr=mcr|0x01;}
\par {\ltrch\loch\f4   mcr=mcr|0x02;}
\par {\ltrch\loch\f4   outportb(PORT+MCR,mcr);}
\par 
\par 
\par {\ltrch\loch\f4   do\{}
\par {\ltrch\loch\f4     if(zmieniono_Linie)\{}
\par {\ltrch\loch\f4       cout<<"---------"<<endl;}
\par {\ltrch\loch\f4       // disable();}
\par {\ltrch\loch\f4       if(zmieniono_DCD)\{}
\par {\ltrch\loch\f4         cout<<"DCD - stan = "<<(bool)(msr&LINIA_DCD)<<endl;}
\par {\ltrch\loch\f4         cout<<"DCD - ilosc zmian = "<<zmieniono_DCD<<endl;}
\par {\ltrch\loch\f4         zmieniono_DCD=0;}
\par {\ltrch\loch\f4       \}}
\par {\ltrch\loch\f4       if(zmieniono_RI)\{}
\par {\ltrch\loch\f4         cout<<"RI - stan = "<<(bool)(msr&LINIA_RI)<<endl;}
\par {\ltrch\loch\f4         cout<<"RI - ilosc zmian = "<<zmieniono_RI<<endl;}
\par {\ltrch\loch\f4         zmieniono_RI=0;}
\par {\ltrch\loch\f4       \}}
\par {\ltrch\loch\f4       if(zmieniono_DSR)\{}
\par {\ltrch\loch\f4         cout<<"DSR - stan = "<<(bool)(msr&LINIA_DSR)<<endl;}
\par {\ltrch\loch\f4         cout<<"DSR - ilosc zmian = "<<zmieniono_DSR<<endl;}
\par {\ltrch\loch\f4         zmieniono_DSR=0;}
\par {\ltrch\loch\f4       \}}
\par {\ltrch\loch\f4       if(zmieniono_CTS)\{}
\par {\ltrch\loch\f4         cout<<"CTS - stan = "<<(bool)(msr&LINIA_CTS)<<endl;}
\par {\ltrch\loch\f4         cout<<"CTS - ilosc zmian = "<<zmieniono_CTS<<endl;}
\par {\ltrch\loch\f4         zmieniono_CTS=0;}
\par {\ltrch\loch\f4       \}}
\par {\ltrch\loch\f4       // enable();}
\par {\ltrch\loch\f4       zmieniono_Linie=false;}
\par {\ltrch\loch\f4     \}}
\par {\ltrch\loch\f4   \}while(!kbhit());}
\par 
\par {\ltrch\loch\f4   outportb(CTRL8259_IMR,inportb(CTRL8259_IMR) | ~PRZERWANIA_COM);}
\par {\ltrch\loch\f4     // Ta instrukcja b\u281 ?dzie niebezpieczna dla systemu w kt\'f3rym pracuje obs\u322 ?uga innego portu}
\par {\ltrch\loch\f4     // z wykorzystaniem przerwania, w\'f3wczas nie powinna by\u263 ? wykonywana.}
\par {\ltrch\loch\f4   mcr=mcr&0xF7; // wy\u322 ?\u261 ?cz przerwania od tego portu}
\par {\ltrch\loch\f4   outportb(PORT+MCR,mcr);}
\par 
\par {\ltrch\loch\f4   mcr=mcr&0xFE;}
\par {\ltrch\loch\f4   mcr=mcr&0xFD;}
\par {\ltrch\loch\f4   outportb(PORT+MCR,mcr);}
\par {\ltrch\loch\f4   setvect(VECT,OldIrq);}
\par 
\par {\ltrch\loch\f4   clrscr();}
\par {\ltrch\loch\f4 \}}
\par \pard\plain \s1\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs20\lang1045\ltrch\loch\fs20 
\par {\ltrch\loch\f1 W windows stan linii wej\u347 ?ciowych odczytujemy przy pomocy funkcji:}
\par 
\par \pard\plain \s1\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs20\lang1045\ltrch\loch\f5\fs20 {\ltrch\loch\f5 BOOL GetCommModemStatus(}
\par {\ltrch\loch\f5 \tab HANDLE hPort, \tab // uchwyt urz\u261 ?dzenia komunikacyjnego}
\par {\ltrch\loch\f5 \tab LPDWORD lpModemStat\tab // wska\u378 ?nik do 32-bitowej zmiennej }
\par {\ltrch\loch\f5 \tab \tab \tab // opisuj\u261 ?cej aktualny stan sygna\u322 ?\'f3w}
\par {\ltrch\loch\f5      );}
\par {\ltrch\loch\f5 Funkcja zwraca TRUE przy prawid\u322 ?owym wykonaniu}
\par {\ltrch\loch\f5 Mo\u380 ?liwe warto\u347 ?ci:}
\par {\ltrch\loch\f5 MS_CTS_ON\tab \tab sygna\u322 ? CTS jest aktywny}
\par {\ltrch\loch\f5 MS_DSR_ON\tab \tab sygna\u322 ? DSR jest aktywny}
\par {\ltrch\loch\f5 MS_RING_ON\tab \tab sygna\u322 ? RI (wywo\u322 ?ania) jest aktywny}
\par \pard\plain \s1\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs20\lang1045\ltrch\loch\f5{\ltrch\loch\f5{\fs20 MS_RLSD_ON\tab \tab sygna\u322 ? RLSD (DCD}) jest aktywny}
\par \pard\plain \s2\sa119\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs20\lang1045 
\par {\ltrch\loch\f1 Przyk\u322 ?adowe wywo\u322 ?anie:}
\par \pard\plain \s9\box\brdrs\brdrw1\brdrcf1\brsp28{\*\brdrt\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrl\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrb\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrr\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f4\fs20\lang1045 {\ltrch\loch\f4 HANDLE hPort;}
\par {\ltrch\loch\f4 DWORD Stan;}
\par 
\par {\ltrch\loch\f4 // ... }
\par {\ltrch\loch\f4 // Otwarto port}
\par 
\par {\ltrch\loch\f4 if(GetCommModemStatus(hPort, &Stan))\{}
\par {\ltrch\loch\f4   if(Stan & MS_CTS_ON)\{}
\par {\ltrch\loch\f4     // ...}
\par {\ltrch\loch\f4   \}}
\par {\ltrch\loch\f4   if(Stan & MS_DSR_ON)\{}
\par {\ltrch\loch\f4     // ...}
\par {\ltrch\loch\f4   \}}
\par {\ltrch\loch\f4   if(Stan & MS_RING_ON)\{}
\par {\ltrch\loch\f4     // ...}
\par {\ltrch\loch\f4   \}}
\par {\ltrch\loch\f4   if(Stan & MS_RLSD_ON)\{}
\par {\ltrch\loch\f4     // ... RLSD == DCD}
\par {\ltrch\loch\f4   \}}
\par {\ltrch\loch\f4 \}}
\par \pard\plain \s1\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs20\lang1045\ltrch\loch\f5\fs24\b 
\par \pard\plain \s1\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs20\lang1045\ltrch\loch\f3\fs24\i\b 
\par \pard\plain \s1\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs20\lang1045\ltrch\loch\f3\fs28\i\b {\ltrch\loch\f3 Przyk\u322 ?adowy program dla windows}
\par \pard\plain \s2\sa119\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs20\lang1045 
\par {\ltrch\loch\f1 Zmienne  :}
\par \pard\plain \s9\box\brdrs\brdrw1\brdrcf1\brsp28{\*\brdrt\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrl\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrb\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrr\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f4\fs20\lang1045 
\par {\ltrch\loch\f4 __published:}
\par {\ltrch\loch\f4         TCheckBox *CKB_PrzelaczajDTR;}
\par {\ltrch\loch\f4           // gdy zaznaczony linia DTR prze\u322 ?\u261 ?czana jest automatycznie}
\par {\ltrch\loch\f4         TCheckBox *CKB_PrzelaczajRTS;}
\par {\ltrch\loch\f4           // gdy zaznaczony linia RTS prze\u322 ?\u261 ?czana jest automatycznie}
\par {\ltrch\loch\f4         TCheckBox *CKB_DTR;}
\par {\ltrch\loch\f4           // pozwala sterowa\u263 ? r\u281 ?cznie lini\u261 ? DTR gdy CKB_PrzelaczajDTR odznaczony}
\par {\ltrch\loch\f4         TCheckBox *CKB_RTS;}
\par {\ltrch\loch\f4           // pozwala seteowa\u263 ? r\u281 ?cznie lini\u261 ? RTS gdy CKB_PrzelaczajRTS odznaczony}
\par {\ltrch\loch\f4         TRadioButton *RB_StanDSR;}
\par {\ltrch\loch\f4         TRadioButton *RB_StanCTS;}
\par {\ltrch\loch\f4         TRadioButton *RB_StanRI;}
\par {\ltrch\loch\f4         TRadioButton *RB_StanDCD;}
\par {\ltrch\loch\f4           // wszystkie RB_... pokazuj\u261 ? stan odpowiedniej linii}
\par {\ltrch\loch\f4         TTimer *TMR_PrzelaczajRTS;}
\par {\ltrch\loch\f4           // gdy CKB_PrzelaczajRTS zaznaczony ten zegar prze\u322 ?\u261 ?cza lini\u281 ? RTS}
\par {\ltrch\loch\f4         TTimer *TMR_PrzelaczajDTR;}
\par {\ltrch\loch\f4           // gdy CKB_PrzelaczajDTR zaznaczony ten zegar prze\u322 ?\u261 ?cza lini\u281 ? DTR}
\par {\ltrch\loch\f4         TTimer *TMR_SprawdzajLinie;}
\par {\ltrch\loch\f4           // sprawdza stan linii wej\u347 ?ciowych}
\par {\ltrch\loch\f4         TEdit *EDT_Port;}
\par {\ltrch\loch\f4           // nazwa portu}
\par {\ltrch\loch\f4         TButton *BTN_OtworzPort;}
\par {\ltrch\loch\f4         TButton *BTN_ZamknijPort;}
\par {\ltrch\loch\f4   ...}
\par {\ltrch\loch\f4 private:}
\par {\ltrch\loch\f4   HANDLE hPort;}
\par {\ltrch\loch\f4   DWORD Stan;}
\par {\ltrch\loch\f4   ...}
\par 
\par \pard\plain \s1\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs20\lang1045 
\par {\ltrch\loch\f1 Metody obs\u322 ?uguj\u261 ?ce port :}
\par 
\par \pard\plain \s9\box\brdrs\brdrw1\brdrcf1\brsp28{\*\brdrt\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrl\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrb\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrr\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f4\fs20\lang1045 
\par {\ltrch\loch\f4 __fastcall TF_Linie::TF_Linie(TComponent* Owner)}
\par {\ltrch\loch\f4         : TForm(Owner)}
\par {\ltrch\loch\f4 \{}
\par {\ltrch\loch\f4   hPort=NULL;}
\par {\ltrch\loch\f4 \}}
\par {\ltrch\loch\f4 //---------------------------------------------------------------------------}
\par {\ltrch\loch\f4 void __fastcall TF_Linie::BTN_OtworzPortClick(TObject *Sender)}
\par {\ltrch\loch\f4 \{}
\par {\ltrch\loch\f4   hPort=CreateFile(EDT_Port->Text.c_str(),      // Nazwa otwieranego portu}
\par {\ltrch\loch\f4                 GENERIC_READ|GENERIC_WRITE,     // Port otwarty do odczytu i zapisu}
\par {\ltrch\loch\f4                 0,                              // Port bez wielodost\u281 ?pu}
\par {\ltrch\loch\f4                 NULL,                           // Bez zabezpiecze\u324 ?}
\par {\ltrch\loch\f4                 OPEN_EXISTING,                  // Otwieramy istniej\u261 ?ce urz\u261 ?dzenie}
\par {\ltrch\loch\f4                 0,}
\par {\ltrch\loch\f4                 NULL);}
\par {\ltrch\loch\f4   if(hPort == INVALID_HANDLE_VALUE)\{}
\par {\ltrch\loch\f4     Application->MessageBox("Nie otwarto portu","B\u322 ?\u261 ?d",MB_OK);}
\par {\ltrch\loch\f4     return ;}
\par {\ltrch\loch\f4   \}}
\par {\ltrch\loch\f4   CKB_DTR->Enabled = false;}
\par {\ltrch\loch\f4   CKB_RTS->Enabled = false;}
\par {\ltrch\loch\f4   CKB_PrzelaczajDTR->Enabled = true;}
\par {\ltrch\loch\f4   CKB_PrzelaczajRTS->Enabled = true;}
\par {\ltrch\loch\f4   TMR_PrzelaczajRTS->Enabled = true;}
\par {\ltrch\loch\f4   TMR_PrzelaczajDTR->Enabled = true;}
\par {\ltrch\loch\f4   TMR_SprawdzajLinie->Enabled = true;}
\par {\ltrch\loch\f4   BTN_OtworzPort->Enabled = false;}
\par {\ltrch\loch\f4   BTN_ZamknijPort->Enabled = true;}
\par {\ltrch\loch\f4   EDT_Port->Enabled = false;}
\par {\ltrch\loch\f4 \}}
\par {\ltrch\loch\f4 //---------------------------------------------------------------------------}
\par {\ltrch\loch\f4 void __fastcall TF_Linie::BTN_ZamknijPortClick(TObject *Sender)}
\par {\ltrch\loch\f4 \{}
\par {\ltrch\loch\f4   CloseHandle(hPort);}
\par {\ltrch\loch\f4   hPort = NULL;}
\par {\ltrch\loch\f4   CKB_DTR->Enabled = false;}
\par {\ltrch\loch\f4   CKB_RTS->Enabled = false;}
\par {\ltrch\loch\f4   CKB_PrzelaczajDTR->Enabled = false;}
\par {\ltrch\loch\f4   CKB_PrzelaczajRTS->Enabled = false;}
\par {\ltrch\loch\f4   TMR_PrzelaczajRTS->Enabled = false;}
\par {\ltrch\loch\f4   TMR_PrzelaczajDTR->Enabled = false;}
\par {\ltrch\loch\f4   TMR_SprawdzajLinie->Enabled = false;}
\par {\ltrch\loch\f4   BTN_OtworzPort->Enabled = true;}
\par {\ltrch\loch\f4   BTN_ZamknijPort->Enabled = false;}
\par {\ltrch\loch\f4   EDT_Port->Enabled = true;}
\par {\ltrch\loch\f4 \}}
\par {\ltrch\loch\f4 //---------------------------------------------------------------------------}
\par {\ltrch\loch\f4 void __fastcall TF_Linie::CKB_PrzelaczajDTRClick(TObject *Sender)}
\par {\ltrch\loch\f4 \{}
\par {\ltrch\loch\f4   if(CKB_PrzelaczajDTR->Checked == true)\{}
\par {\ltrch\loch\f4     CKB_DTR->Enabled = false;}
\par {\ltrch\loch\f4     TMR_PrzelaczajDTR->Enabled = true;}
\par {\ltrch\loch\f4   \}else\{}
\par {\ltrch\loch\f4     TMR_PrzelaczajDTR->Enabled = false;}
\par {\ltrch\loch\f4     CKB_DTR->Enabled = true;}
\par {\ltrch\loch\f4   \}}
\par {\ltrch\loch\f4 \}}
\par {\ltrch\loch\f4 //---------------------------------------------------------------------------}
\par {\ltrch\loch\f4 void __fastcall TF_Linie::CKB_PrzelaczajRTSClick(TObject *Sender)}
\par {\ltrch\loch\f4 \{}
\par {\ltrch\loch\f4   if(CKB_PrzelaczajRTS->Checked == true)\{}
\par {\ltrch\loch\f4     CKB_RTS->Enabled = false;}
\par {\ltrch\loch\f4     TMR_PrzelaczajRTS->Enabled = true;}
\par {\ltrch\loch\f4   \}else\{}
\par {\ltrch\loch\f4     TMR_PrzelaczajRTS->Enabled = false;}
\par {\ltrch\loch\f4     CKB_RTS->Enabled = true;}
\par {\ltrch\loch\f4   \}}
\par {\ltrch\loch\f4 \}}
\par {\ltrch\loch\f4 //---------------------------------------------------------------------------}
\par {\ltrch\loch\f4 void __fastcall TF_Linie::CKB_DTRClick(TObject *Sender)}
\par {\ltrch\loch\f4 \{}
\par {\ltrch\loch\f4   if(CKB_DTR->Checked == true)\{}
\par {\ltrch\loch\f4     EscapeCommFunction(hPort,SETDTR);}
\par {\ltrch\loch\f4   \}else\{}
\par {\ltrch\loch\f4     EscapeCommFunction(hPort,CLRDTR);}
\par {\ltrch\loch\f4   \}}
\par {\ltrch\loch\f4 \}}
\par {\ltrch\loch\f4 //---------------------------------------------------------------------------}
\par {\ltrch\loch\f4 void __fastcall TF_Linie::CKB_RTSClick(TObject *Sender)}
\par {\ltrch\loch\f4 \{}
\par {\ltrch\loch\f4   if(CKB_RTS->Checked == true)\{}
\par {\ltrch\loch\f4     EscapeCommFunction(hPort,SETRTS);}
\par {\ltrch\loch\f4   \}else\{}
\par {\ltrch\loch\f4     EscapeCommFunction(hPort,CLRRTS);}
\par {\ltrch\loch\f4   \}}
\par {\ltrch\loch\f4 \}}
\par {\ltrch\loch\f4 //---------------------------------------------------------------------------}
\par {\ltrch\loch\f4 void __fastcall TF_Linie::TMR_PrzelaczajDTRTimer(TObject *Sender)}
\par {\ltrch\loch\f4 \{}
\par {\ltrch\loch\f4   if(CKB_DTR->Checked == true)\{}
\par {\ltrch\loch\f4     EscapeCommFunction(hPort,SETDTR);}
\par {\ltrch\loch\f4     CKB_DTR->Checked = false;}
\par {\ltrch\loch\f4   \}else\{}
\par {\ltrch\loch\f4     EscapeCommFunction(hPort,CLRDTR);}
\par {\ltrch\loch\f4     CKB_DTR->Checked = true;}
\par {\ltrch\loch\f4   \}}
\par {\ltrch\loch\f4 \}}
\par {\ltrch\loch\f4 //---------------------------------------------------------------------------}
\par {\ltrch\loch\f4 void __fastcall TF_Linie::TMR_PrzelaczajRTSTimer(TObject *Sender)}
\par {\ltrch\loch\f4 \{}
\par {\ltrch\loch\f4   if(CKB_RTS->Checked == true)\{}
\par {\ltrch\loch\f4     EscapeCommFunction(hPort,SETRTS);}
\par {\ltrch\loch\f4     CKB_RTS->Checked = false;}
\par {\ltrch\loch\f4   \}else\{}
\par {\ltrch\loch\f4     EscapeCommFunction(hPort,CLRRTS);}
\par {\ltrch\loch\f4     CKB_RTS->Checked = true;}
\par {\ltrch\loch\f4   \}}
\par {\ltrch\loch\f4 \}}
\par {\ltrch\loch\f4 //---------------------------------------------------------------------------}
\par {\ltrch\loch\f4 void __fastcall TF_Linie::TMR_SprawdzajLinieTimer(TObject *Sender)}
\par {\ltrch\loch\f4 \{}
\par {\ltrch\loch\f4   GetCommModemStatus(hPort,&Stan);}
\par 
\par {\ltrch\loch\f4   RB_StanCTS->Checked = Stan & MS_CTS_ON;}
\par {\ltrch\loch\f4   RB_StanDSR->Checked = Stan & MS_DSR_ON;}
\par {\ltrch\loch\f4   RB_StanRI->Checked = Stan & MS_RING_ON;}
\par {\ltrch\loch\f4   RB_StanDCD->Checked = Stan & MS_RLSD_ON;}
\par {\ltrch\loch\f4 \}}
\par {\ltrch\loch\f4 //---------------------------------------------------------------------------}
\par {\ltrch\loch\f4 void __fastcall TF_Linie::FormClose(TObject *Sender, TCloseAction &Action)}
\par {\ltrch\loch\f4 \{}
\par {\ltrch\loch\f4   CloseHandle(hPort);}
\par {\ltrch\loch\f4 \}}
\par 
\par \pard\plain \s1\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs20\lang1045 
\par 
\par \pard\plain \s1\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs20\lang1045\ltrch\loch\f3\fs28\i\b {\ltrch\loch\f3 Rozbudowa klasy CRS232.}
\par \pard\plain \s1\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs20\lang1045\ltrch\loch\fs20 
\par {\ltrch\loch\f1 Raczej nie ma wi\u281 ?kszego sensu analizowa\u263 ? zmian wewn\u261 ?trz klasy CRS232. Wykonane s\u261 ? tylko zmiany opisane w tym artykule. Przedstawiam jedynie spos\'f3b korzystania z niej w dos. Pod windows operacje te wygl\u261 ?daj\u261 ? identycznie wi\u281 ?c przyk\u322 ?ad nie jest tu opisany - d
ost\u281 ?pny jest jedynie elektronicznie.}
\par 
\par \pard\plain \s9\box\brdrs\brdrw1\brdrcf1\brsp28{\*\brdrt\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrl\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrb\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrr\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f4\fs20\lang1045 
\par {\ltrch\loch\f4 #include <iostream.h>}
\par {\ltrch\loch\f4 #include <cstring.h>}
\par {\ltrch\loch\f4 #include <conio.h>}
\par 
\par {\ltrch\loch\f4 #include "..\\include\\typy.h"}
\par {\ltrch\loch\f4 #include "..\\include\\rs232.h"}
\par 
\par {\ltrch\loch\f4 CRS232 com;}
\par {\ltrch\loch\f4 main()}
\par {\ltrch\loch\f4 \{}
\par {\ltrch\loch\f4   size_t p;}
\par {\ltrch\loch\f4   cout<<"numer portu (1,2,3,4) : ?"<<endl;}
\par {\ltrch\loch\f4   cin>>p;}
\par {\ltrch\loch\f4   switch(p)\{}
\par {\ltrch\loch\f4     case 1:      p=COM1;    break;}
\par {\ltrch\loch\f4     case 2:      p=COM2;    break;}
\par {\ltrch\loch\f4     case 3:      p=COM3;    break;}
\par {\ltrch\loch\f4     case 4:      p=COM4;    break;}
\par {\ltrch\loch\f4     default :}
\par {\ltrch\loch\f4       cout<<" zly numer portu"<<endl;}
\par {\ltrch\loch\f4       return 0;}
\par {\ltrch\loch\f4   \}}
\par {\ltrch\loch\f4   if(ERR_NODEV==com.open(p))\{}
\par {\ltrch\loch\f4     cout<<"error CRS232::open()"<<endl;}
\par {\ltrch\loch\f4     return 0;}
\par {\ltrch\loch\f4   \}}
\par 
\par {\ltrch\loch\f4   string s;}
\par {\ltrch\loch\f4   ubyte_t stan;}
\par {\ltrch\loch\f4   do\{}
\par {\ltrch\loch\f4     cout<<endl<<endl;}
\par {\ltrch\loch\f4     delay(1000);}
\par {\ltrch\loch\f4     com.ioctl(SWITCH_DTR4);}
\par {\ltrch\loch\f4     com.ioctl(SWITCH_RTS7);}
\par {\ltrch\loch\f4     com.ioctl(DAJ_DSR6, (par_t)&stan);}
\par {\ltrch\loch\f4     cout<<"Stan DSR : "<< (bool)stan<<endl;}
\par {\ltrch\loch\f4     com.ioctl(DAJ_CTS8, (par_t)&stan);}
\par {\ltrch\loch\f4     cout<<"Stan CTS : "<< (bool)stan<<endl;}
\par {\ltrch\loch\f4     com.ioctl(DAJ_RI9, (par_t)&stan);}
\par {\ltrch\loch\f4     cout<<"Stan RI  : "<< (bool)stan<<endl;}
\par {\ltrch\loch\f4     com.ioctl(DAJ_DCD1, (par_t)&stan);}
\par {\ltrch\loch\f4     cout<<"Stan DCD : "<< (bool)stan<<endl;}
\par {\ltrch\loch\f4   \}while(!kbhit());}
\par {\ltrch\loch\f4   com.close();}
\par {\ltrch\loch\f4 \}}
\par 
\par \pard\plain \s1\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs20\lang1045\ltrch\loch\fs24\b 
\par \pard\plain \s1\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs20\lang1045\ltrch\loch\f3\fs28\i\b 
\par \pard\plain \s1\cf1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs20\lang1045 {\ltrch\loch\f1 }
\par }